{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,I,EAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAW,SAAS,gBAAgB,CAAC,Q,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IACrC,EAAK,SAAS,aAAa,CAAC,MAElC,SAAS,EAAY,CAAI,EACvB,MAAO,CAAC,EAAK,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAM,GACrD,CAGE,AAoBO,EApBD,IAAI,CAAC,SAAC,CAAA,CAAG,CAAf,EACE,OAAO,EAAY,GAAK,EAAY,EACtC,GAEA,AAgBO,EAhBD,OAAO,CAAC,SAAC,CAAf,EACE,EAAG,MAAM,CAAC,EACZ,GAIO,AAWI,EAXE,GAAG,CAAC,SAAC,CAAlB,EACE,MAAO,CACL,KAAM,EAAS,WAAW,CAAC,IAAI,CAAC,IAChC,SAAU,EAAS,OAAO,CAAC,QAAQ,CACnC,OAAQ,EAAS,OAAO,CAAC,MAAM,CAC/B,IAAK,EAAS,OAAO,CAAC,GAAG,AAC3B,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar list = _to_consumable_array(document.querySelectorAll(\"li\"));\nvar ul = document.querySelector(\"ul\");\nfunction parseSalary(data) {\n    return +data.dataset.salary.slice(1).replace(/,/g, \"\");\n}\nfunction sortList(param) {\n    param.sort(function(a, b) {\n        return parseSalary(b) - parseSalary(a);\n    });\n    param.forEach(function(li) {\n        ul.append(li);\n    });\n}\nfunction getEmployees(param) {\n    return param.map(function(employee) {\n        return {\n            name: employee.textContent.trim(\"\"),\n            position: employee.dataset.position,\n            salary: employee.dataset.salary,\n            age: employee.dataset.age\n        };\n    });\n}\nsortList(list);\ngetEmployees(list);\n\n//# sourceMappingURL=index.49777937.js.map\n","'use strict';\n\nconst list = [...document.querySelectorAll('li')];\nconst ul = document.querySelector('ul');\n\nfunction parseSalary(data) {\n  return +data.dataset.salary.slice(1).replace(/,/g, '');\n}\n\nfunction sortList(param) {\n  param.sort((a, b) => {\n    return parseSalary(b) - parseSalary(a);\n  });\n\n  param.forEach((li) => {\n    ul.append(li);\n  });\n}\n\nfunction getEmployees(param) {\n  return param.map((employee) => {\n    return {\n      name: employee.textContent.trim(''),\n      position: employee.dataset.position,\n      salary: employee.dataset.salary,\n      age: employee.dataset.age,\n    };\n  });\n}\n\nsortList(list);\ngetEmployees(list);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","list","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","ul","querySelector","parseSalary","data","dataset","salary","replace","param","sort","a","b","forEach","li","append","map","employee","textContent","trim","position","age"],"version":3,"file":"index.49777937.js.map"}